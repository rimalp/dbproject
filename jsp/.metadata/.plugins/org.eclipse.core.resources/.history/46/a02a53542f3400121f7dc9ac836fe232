package assignment.servlets;

import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import assignment.db.DatabaseManager;

/**
 * Servlet implementation class Student_Welcome_Servlet
 */
public class Student_Welcome_Servlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	
	private DatabaseManager manager;
	private static Statement sql;
	
	/**
	 * @see Servlet#init(ServletConfig)
	 */
	public void init(ServletConfig config) throws ServletException {
		super.init(config);
		try{
			manager = new DatabaseManager();
			sql = DatabaseManager.getSql();
		}catch(ClassNotFoundException e){}
		catch(SQLException sqle){}
	
		System.out.println("STUDENTWELCOME INIT");
		System.out.println("Inside the init method, the value of sql Statement object: " + sql);

	}
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public Student_Welcome_Servlet() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		System.out.println("student welcome do get ##################################");
		
		HttpSession session = request.getSession();
		String email = (String) session.getAttribute("currentEmail");
		
		String pressed = request.getParameter("id");
		
		ResultSet rs = null;
		String query = "";
		
		if(pressed.equals("sections"))
		{
			System.out.println("SECTIONS PRESSED");
			//find the CRNs and course names for the sections that the student is in
			//sections page displays section names, num active assignments, and next deadline
			//query = String.format("SELECT CRN, course FROM takes, sections WHERE email='%s' AND sections.CRN=takes.CRN", email);
			//just gets course name, active assignment count
			String active = "SELECT course, COUNT(DISTINCT assignmentID) FROM sections, takes, assignments WHERE sections.CRN=takes.CRN AND takes.CRN=assignments.CRN AND takes.email='"+email+"' AND to_date(deadline, 'YYYY-MM-DD') > CURRENT_DATE GROUP BY course";
			rs = queryDB(active);
			//add rs to sectionData[][]
			
			//get next deadline for each section that the student is in
			String next = "SELECT course, deadline FROM sections, assignments, takes WHERE takes.email='"+email+"' AND sections.CRN=takes.CRN AND takes.CRN=assignments.CRN AND (to_date(deadline, 'YYYY-MM-DD') - CURRENT_DATE) > 0 AND (to_date(deadline, 'YYYY-MM-DD') - CURRENT_DATE) < ALL(SELECT (to_date(deadline, 'YYYY-MM-DD') - CURRENT_DATE) FROM assignments, takes WHERE takes.email='"+email+"' AND takes.CRN=assignments.CRN)";
			rs = queryDB(next);//HEREREHEHEHEHERHERHERHERHERee
			//add new rs to sectionData[][]
			
			String[][] sectionData = fillSectionData(rs);
			
			try{
				request.setAttribute("sectionData", sectionData);
				request.getRequestDispatcher("student_sections.jsp").forward(request, response);
			}catch(IOException e) { System.out.println("ioexception: "+e); }
			catch (ServletException e) { System.out.println("servlet exception: "+e); }
		}
		else if(pressed.equals("assignments"))
		{
			System.out.println("Assignments PRESSED");
			//section, description, type, deadline
			//not sure we have a type column in the database
			query = String.format("SELECT name, description, deadline FROM assignments, takes WHERE takes.email='%s' AND takes.CRN=assignments.CRN ORDER BY deadline ASC", email);
			rs = queryDB(query);
			
			String[][] assignmentData= fillAssignmentData(rs);
			try{
				request.setAttribute("assignmentData", assignmentData);
				request.getRequestDispatcher("student_assignment.jsp").forward(request, response);
			}catch(IOException e) { System.out.println("ioexception: "+e); }
			catch (ServletException e) { System.out.println("servlet exception: "+e); }
		}
		else
		{
			
		}
		
		
		
	}

	
	/*
	 * fills section data array with data from rs (result of query)
	 */
	private String[][] fillSectionData(ResultSet rs)
	{
		String[][] r=new String[50][3];
		
		try{
			int i=0;
			while(rs.next())
			{
				//System.out.println("HERGERGEG: "+count.getString(1));
				r[i][0]=rs.getString(1);
				r[i][1]=Integer.toString(rs.getInt(2));
				r[i][2]=rs.getString(3);
				i++;
			}
		}catch(SQLException e) { System.out.println("SQLEXCEPTION: "+e); }
		
		return r;
	}
	
	/*
	 * fills assignment data array with data from result set
	 */
	private String[][] fillAssignmentData(ResultSet rs)
	{
		String[][] r = new String[10][4];
		try{
			int i=0;
			while(rs.next())
			{
				//System.out.println("HERGERGEG: "+count.getString(1));
				r[i][0]=rs.getString(1);
				r[i][1]=rs.getString(2);
				r[i][2]=rs.getString(3);
				//r[i][3]=rs.getString(4);
				i++;
			}
		}catch(SQLException e) { System.out.println("SQLEXCEPTION: "+e); }
		return r;
	}
	
	/**
	 * queries the database with the given string interpreted as an sql statement...
	 * returns a resultset as the result of the query to the database
	 */
	private ResultSet queryDB(String query)
	{
		ResultSet rs = null;
		try {		
			if(sql == null) {
				System.out.println("SQL STATEMENT OBJECT IS EMPTY!");
			} else {
				if(sql.isClosed()) {
					System.err.println("The sql statement object is closed!!!");					
				}
				rs = sql.executeQuery(query);
			}
		} catch(SQLException e){
			System.err.println("Exception generated ----> " + e.toString());
		}
		return rs;
	}
	
	
	
	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
	}
	
	
	

}
